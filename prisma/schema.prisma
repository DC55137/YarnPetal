// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  StripeCustomer    StripeCustomer?

}

model Bundle {
  id           Int           @id @default(autoincrement())
  name         String @unique
  description  String
  price        Float
  slug        String @unique  
  size         String   @default("Small")
  stock        Int
  imageUrl     String // Default image URL for the product
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  BundleTheme BundleTheme[]
}

model BundleTheme {
  id           Int           @id @default(autoincrement())
  bundleName  String      @default("Bloom Bundle")
  name         String        
  stock        Int
  imageFront     String // Default image URL for the theme  
  imageBlank    String // Default image URL for the theme
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bundleId      Int
  Bundle        Bundle    @relation(fields: [bundleId], references: [id])
  orderItems    OrderItem[]
  animalLocationX Float @default(0)
  animalLocationY Float @default(0)
  animalWidth     Float @default(1)
  animalRotation     Float @default(0)
  flowers        Flower[] @relation("BundleThemeFlowers")
}


model Hat {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String
  price        Float
  stock        Int
  imageUrl     String        @default("https://res.cloudinary.com/dx3x3t5mz/image/upload/v1626820134/animal-hats/animal-hat-1.jpg")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orderItems OrderItem[]
}

model Animal {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  stock        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  widthFactor Float           
  xlocation    Float           
  imageUrl     String // Default image URL for the animal
  graduationUrl String
  birthdayUrl String
  orderItems   OrderItem[]
}

model Flower{
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String         @default("1 x")
  price        Float
  stock        Int
  imageUrl     String 
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bundleThemes BundleTheme[] @relation("BundleThemeFlowers")
}

model Order {
  id             Int         @id @default(autoincrement())
  orderNumber   Int       @unique
  userId         Int?
  firstName      String
  lastName       String
  email          String
  phone           String
  deliveryMethod String
  user           User?        @relation(fields: [userId], references: [id])
  total          Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderItems     OrderItem[]
  paid          Boolean      @default(false)
  address       String? 
  apartment     String? 
  city          String?
  country       String?
  region        String?
  postalCode    String?
}

model OrderItem {
  id             Int         @id @default(autoincrement())
  orderId        Int
  order          Order       @relation(fields: [orderId], references: [id])
  bundleThemeId  Int
  bundleTheme    BundleTheme @relation(fields: [bundleThemeId], references: [id])
  animalId       Int
  animal         Animal      @relation(fields: [animalId], references: [id])
  hatId          Int
  hat            Hat        @relation(fields: [hatId], references: [id])
  quantity       Int
  extras         Json
  price          Float
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}


model StripeCustomer {
  id               String @id @default(uuid())
  userId           Int @unique
  stripeCustomerId String @unique
  user             User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
