// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum BundleSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum FlowerType {
  SMALL
  MAIN
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  password       String
  name           String?
  orders         Order[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  stripeCustomer StripeCustomer?
}

model Size {
  id              Int        @id @default(autoincrement())
  size            BundleSize @unique
  price           Float
  smallFlowerLimit Int       // Number of small flowers allowed
  mainFlowerLimit  Int       // Number of main flowers allowed
  baseAnimalLimit  Int       // Base number of animals included (1 for all sizes)
  maxExtraAnimals  Int       // Maximum number of extra animals allowed (1 in this case)
  extraAnimalPrice Float     // Price for each extra animal ($7.00)
  dimensionScale   Float     // Scale factor for bundle display
  image          String     @default("")
  orderItems      OrderItem[]
}

model Color {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String
  stock        Int        // Added stock field
  imageBack    String     
  imageFront   String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderItems   OrderItem[]
}

model Flower {
  id           Int              @id @default(autoincrement())
  name         String           @unique
  flowerType   FlowerType
  isPremium    Boolean         @default(false)  // Add this field
  description  String
  price        Float
  stock        Int
  imageUrl     String
  imageSingle  String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  orderItems   FlowerSelection[]
}

model Animal {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  price            Float
  stock            Int
  imageUrl         String
  graduationUrl    String
  birthdayUrl      String
  widthFactor      Float       
  xlocation        Float       
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  baseOrderItems   OrderItem[] @relation("BaseAnimal")
  extraOrderItems  OrderItem[] @relation("ExtraAnimal")
}

model Hat {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  type             String      // GRADUATION or BIRTHDAY
  description      String
  price            Float
  stock            Int
  imageUrl         String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  baseAnimalItems  OrderItem[] @relation("BaseAnimalHat")
  extraAnimalItems OrderItem[] @relation("ExtraAnimalHat")
}

model Order {
  id             Int         @id @default(autoincrement())
  orderNumber    Int         @unique
  userId         String?
  firstName      String
  lastName       String
  email          String
  phone          String
  deliveryMethod String
  user           User?       @relation(fields: [userId], references: [id])
  total          Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  orderItems     OrderItem[]
  paid           Boolean     @default(false)
  address        String? 
  apartment      String? 
  city           String?
  country        String?
  region        String?
  postalCode    String?
}

model OrderItem {
  id             Int              @id @default(autoincrement())
  orderId        Int
  order          Order            @relation(fields: [orderId], references: [id])
  colorId        Int
  color          Color            @relation(fields: [colorId], references: [id])
  sizeId         Int
  size           Size             @relation(fields: [sizeId], references: [id])
  baseAnimalId   Int?            // The included animal
  baseAnimal     Animal?          @relation("BaseAnimal", fields: [baseAnimalId], references: [id])
  baseAnimalHatId Int?           // Hat for the base animal
  baseAnimalHat  Hat?            @relation("BaseAnimalHat", fields: [baseAnimalHatId], references: [id])
  extraAnimalId  Int?            // The additional animal (if added)
  extraAnimal    Animal?         @relation("ExtraAnimal", fields: [extraAnimalId], references: [id])
  extraAnimalHatId Int?          // Hat for the extra animal
  extraAnimalHat Hat?           @relation("ExtraAnimalHat", fields: [extraAnimalHatId], references: [id])
  flowers        FlowerSelection[]
  quantity       Int
  basePrice      Float           // Price before extra animal
  extraAnimalPrice Float?        // Price for extra animal if added
  totalPrice     Float           // Total price including extras
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model FlowerSelection {
  id          Int       @id @default(autoincrement())
  orderItemId Int
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
  flowerId    Int
  flower      Flower    @relation(fields: [flowerId], references: [id])
  quantity    Int
  position    Int
}

model StripeCustomer {
  id               String   @id @default(uuid())
  userId           String   @unique
  stripeCustomerId String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}